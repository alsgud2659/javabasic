package pm;

public class Exam5 {
	// 쓰레드 Thread
	// 규모가 작은 프로젝트라도 쓰레드를 사용하지 않을때가 거의 없을 정도로 쓰임새가 많다.

	// 쓰레드란...
	// 프로그램을 작성하다 보면 어쩔 수 없이 동시에 수행해야 하는 일들이 있다.
	// 예를 들어 비디오 재생 프로그램을 만든다고 할 때, 화면 재생과 오디오 재생이 동시에 실행 되어야 한다.
	// 이렇게 여려개의 작업이 동시에 수행되도록 하기 위해서 한정된 cpu를 여러개의 작업으로 나누어 사용해야 하는데
	// 이것이 바로 쓰레드이다.

	// 프로그램 & 프로세스
	// 프로그램은 하드에 저장된 파일들의 모음
	// 프로세스는 메모리상에 로딩된 프로그램
	// 멀티 프로스세는 동일한 프로그램을 메모리에 두번 이상 로딩

	// 쓰레드
	// cpu를 사용하는 최소 단위
	// 프로세스만 cpu를 사용할 수 있는데, 자세히 보면 실제 cpu를 사용하는 것은 프로세스 내부의 쓰레드다.

	// 자바에서의 쓰레드
	// 프로그램이 메모리로 로딩 되고, 그 로딩된 프로세스의 내부에는 쓰레드가 있다.
	// 자바로 작성된 프로그램을 실행하면 메모리로 로딩되어 프로세스 상태가 된다.

	// .class 파일을 실행하면 자바 가상 머신은 main쓰레드를 생성한다.
	// 즉 프로그램이 처음 실행되면 시작 시점에 main 쓰레드 하나만 존재한다.
	// main() 메서드에서 작성된 내용이 바로 main쓰레드에서 동작한다.
	// 그런데 만약 main쓰레드의 내부에서 2개의 쓰레드를 생성해서 실행하면 동시에 2개의 쓰레드가 동작하게 되는데,
	// 이것을 멀티 쓰레드 프로세스라고 한다.

	// 멀티쓰레드의 필요성
	// 쓰레드는 cpu를 사용하는 최소단위다. 그러면 멀티 쓰레드는 2개 이상의 쓰레드가 동시에 cpu를 사용한다는 뜻이다.
	// 멀티 쓰레드가 필요한 이유는..
	// 비디오와 자막을 화면에 동시에 출력할 떄를 생각해보자
	// 자막은 비디오의 프레임에 맞춰 출력되어야 한다.

	// 만약 단일쓰레드로 2개의 작업을 처리하면 각각의 작업은 순차적으로 처리된다.
	// 먼저 시작된 작업이 완전히 종료된 후에야 두번째 작업이 실행된다.
	// 하지만 멀티 쓰레드는 동시성 또는 병렬성을 가지고 처리된다.

	public static void main(String[] args) {
		int[] intArray = { 1, 2, 3, 4, 5 }; // 비디오 프레임
		String[] strArray = { "하나", "둘", "셋", "넷", "다섯" };

		for (int a : intArray) {
			System.out.println("비디오 프레임" + a);
		}

		for (String b : strArray) {
			System.out.println("자막번호" + b);
		}

	}

	// 쓰레드 생성 방법
	// 1. 쓰레드 클래스를 상속받아 run() 메서드를 오버라이딩하는 방법
	// 2. 1단계 - Runnable 인터페이스를 구현 Runnable 객체를 생성한다.
	// 2단계 - 쓰레드 객체를 생성할 때 1단계에서 생성한 Runnable 객체를 생성자에 전달해준다.

	// 사실 2가지 방법 모두 run()메서드를 재정의하여 Thread 객체를 생성한다.

	// 쓰레드 실행 방법
	// 객체를 어떤 방법으로 실행하던 쓰레드 객체 내의 start()메서드를 호출한다.
	// 여기서 재정의한 메서드는 run()인데 run()의 내용을 실행하기 위해서는 반드시 start()메서드를 호출해야 한다.
	// 주의할 점은 start()메서드로 실행된 쓰레드 객체는 재사용 할 수 없다.
	// 만약 다시 실행 하려면 객체를 다시 생성해야만 한다.

}
